"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_nft-drop-77497290_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-e6dc10bd.browser.esm.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-e6dc10bd.browser.esm.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ StandardErc721; }\n/* harmony export */ });\n/* harmony import */ var _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-19379f73.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-19379f73.browser.esm.js\");\n/* harmony import */ var _transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transactions-083fe524.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-083fe524.browser.esm.js\");\n/* harmony import */ var _erc_721_73df8a80_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./erc-721-73df8a80.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-721-73df8a80.browser.esm.js\");\n\n\n\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new _erc_721_73df8a80_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.E(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await (0,_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aL)(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await (0,_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aL)(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(async (operator, tokenId) => {\n    return _transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await (0,_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aL)(operator), tokenId]\n    });\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-e6dc10bd.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/nft-drop-77497290.browser.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/nft-drop-77497290.browser.esm.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NFTDrop: function() { return /* binding */ NFTDrop; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _QueryParams_83e678cb_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./QueryParams-83e678cb.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/QueryParams-83e678cb.browser.esm.js\");\n/* harmony import */ var _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-19379f73.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-19379f73.browser.esm.js\");\n/* harmony import */ var _transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./transactions-083fe524.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-083fe524.browser.esm.js\");\n/* harmony import */ var _contract_appuri_c5ea176e_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contract-appuri-c5ea176e.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-c5ea176e.browser.esm.js\");\n/* harmony import */ var _fetchCurrencyValue_1a47daf3_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fetchCurrencyValue-1a47daf3.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-1a47daf3.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./contract-interceptor-d7b164a7.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js\");\n/* harmony import */ var _contract_owner_50abb8cd_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./contract-owner-50abb8cd.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-owner-50abb8cd.browser.esm.js\");\n/* harmony import */ var _contract_platform_fee_9ec7bfc5_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./contract-platform-fee-9ec7bfc5.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-9ec7bfc5.browser.esm.js\");\n/* harmony import */ var _contract_roles_295c2434_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-roles-295c2434.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-roles-295c2434.browser.esm.js\");\n/* harmony import */ var _contract_sales_4df7a638_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contract-sales-4df7a638.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-sales-4df7a638.browser.esm.js\");\n/* harmony import */ var _drop_claim_conditions_6010745a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./drop-claim-conditions-6010745a.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/drop-claim-conditions-6010745a.browser.esm.js\");\n/* harmony import */ var _erc_721_standard_e6dc10bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./erc-721-standard-e6dc10bd.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-e6dc10bd.browser.esm.js\");\n/* harmony import */ var _thirdweb_checkout_00fd21c6_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./thirdweb-checkout-00fd21c6.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-00fd21c6.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc721 instead\n */\nclass NFTDrop extends _erc_721_standard_e6dc10bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.S {\n  static contractRoles = _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.dA;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.cq(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.bj.parse(abi || []);\n    this.metadata = new _contract_appuri_c5ea176e_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.C(this.contractWrapper, _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.bR, this.storage);\n    this.app = new _contract_appuri_c5ea176e_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.b(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_roles_295c2434_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.C(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new _contract_owner_50abb8cd_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.C(this.contractWrapper, this.metadata);\n    this.sales = new _contract_sales_4df7a638_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.C(this.contractWrapper);\n    this.claimConditions = new _drop_claim_conditions_6010745a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.D(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new _fetchCurrencyValue_1a47daf3_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__.C(this.contractWrapper);\n    this.estimator = new _contract_appuri_c5ea176e_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.G(this.contractWrapper);\n    this.events = new _contract_appuri_c5ea176e_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a(this.contractWrapper);\n    this.platformFees = new _contract_platform_fee_9ec7bfc5_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__.C(this.contractWrapper);\n    this.revealer = new _contract_owner_50abb8cd_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.D(this.contractWrapper, this.storage, _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.cN.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__.C(this.contractWrapper);\n    this.owner = new _contract_owner_50abb8cd_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a(this.contractWrapper);\n    this.checkout = new _thirdweb_checkout_00fd21c6_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.P(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_16__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_16__.BigNumber.from(queryParams?.count || _QueryParams_83e678cb_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__.D).toNumber();\n    const maxId = Math.min((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_16__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_16__.BigNumber.from(queryParams?.count || _QueryParams_83e678cb_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__.D).toNumber();\n    const firstTokenId = ethers__WEBPACK_IMPORTED_MODULE_16__.BigNumber.from(Math.max((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start));\n    const maxId = ethers__WEBPACK_IMPORTED_MODULE_16__.BigNumber.from(Math.min((await this.contractWrapper.read(\"nextTokenIdToMint\", [])).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns The unclaimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns The unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [(0,_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.H)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_16__.constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns  an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)((() => {\n    var _this = this;\n    return async function (destinationAddress, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this.erc721.claimTo.prepare(destinationAddress, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns  an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)((() => {\n    var _this2 = this;\n    return async function (quantity) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n  burn = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */(0,_transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.d)(async (operator, tokenId) => {\n    return _transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [operator, tokenId]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _transactions_083fe524_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9uZnQtZHJvcC03NzQ5NzI5MC5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUN1QztBQUNtSDtBQUMvRjtBQUMwQztBQUMvRDtBQUNNO0FBQzhCO0FBQzdCO0FBQ2I7QUFDTTtBQUNPO0FBQ1Y7QUFDQTtBQUM1QjtBQUN4QztBQUNpQjtBQUNDO0FBQ0Q7QUFDTjtBQUNUO0FBQ0Q7QUFDb0Q7QUFDVDtBQUNRO0FBQ0c7QUFDRztBQUNiO0FBQ007QUFDRTtBQUNKO0FBQ1M7QUFDTDtBQUNDO0FBQ0M7QUFDRjtBQUNBO0FBQ1A7QUFDVTtBQUNXO0FBQ2Y7QUFDSjtBQUNNO0FBQ0s7QUFDRztBQUNKO0FBQ0w7QUFDRTtBQUNKO0FBQ0E7QUFDRztBQUNDO0FBQ0M7QUFDUjtBQUNNO0FBQ0s7QUFDRztBQUNmO0FBQ1E7QUFDRjtBQUNJO0FBQ0Y7QUFDSztBQUNOO0FBQ1I7QUFDVTtBQUNGO0FBQ0M7QUFDVDtBQUNPO0FBQ0Y7QUFDVTtBQUNWO0FBQ0E7QUFDSjtBQUNEO0FBQ007QUFDQztBQUNDO0FBQ0k7QUFDQTtBQUNHO0FBQ2Q7QUFDbEM7QUFDSDtBQUNzQjtBQUNVO0FBQ3JCO0FBQ2U7QUFDbkM7QUFDVztBQUNrQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0MsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdFQUFjO0FBQ3BDLHlCQUF5Qiw4REFBdUI7O0FBRWhEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9uZnQtZHJvcC03NzQ5NzI5MC5icm93c2VyLmVzbS5qcz9hY2JhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciwgY29uc3RhbnRzIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IEQgYXMgREVGQVVMVF9RVUVSWV9BTExfQ09VTlQgfSBmcm9tICcuL1F1ZXJ5UGFyYW1zLTgzZTY3OGNiLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGRBIGFzIE5GVF9CQVNFX0NPTlRSQUNUX1JPTEVTLCBjcSBhcyBDb250cmFjdFdyYXBwZXIsIGJqIGFzIEFiaVNjaGVtYSwgYlIgYXMgRHJvcEVyYzcyMUNvbnRyYWN0U2NoZW1hLCBjTiBhcyBGRUFUVVJFX05GVF9SRVZFQUxBQkxFLCBIIGFzIGdldFJvbGVIYXNoIH0gZnJvbSAnLi9pbmRleC0xOTM3OWY3My5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBkIGFzIGJ1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbiwgVCBhcyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb25zLTA4M2ZlNTI0LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RNZXRhZGF0YSwgYiBhcyBDb250cmFjdEFwcFVSSSwgRyBhcyBHYXNDb3N0RXN0aW1hdG9yLCBhIGFzIENvbnRyYWN0RXZlbnRzIH0gZnJvbSAnLi9jb250cmFjdC1hcHB1cmktYzVlYTE3NmUuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgQyBhcyBDb250cmFjdEVuY29kZXIgfSBmcm9tICcuL2ZldGNoQ3VycmVuY3lWYWx1ZS0xYTQ3ZGFmMy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbnRyYWN0SW50ZXJjZXB0b3IgfSBmcm9tICcuL2NvbnRyYWN0LWludGVyY2VwdG9yLWQ3YjE2NGE3LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RSb3lhbHR5LCBEIGFzIERlbGF5ZWRSZXZlYWwsIGEgYXMgQ29udHJhY3RPd25lciB9IGZyb20gJy4vY29udHJhY3Qtb3duZXItNTBhYmI4Y2QuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgQyBhcyBDb250cmFjdFBsYXRmb3JtRmVlIH0gZnJvbSAnLi9jb250cmFjdC1wbGF0Zm9ybS1mZWUtOWVjN2JmYzUuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgQyBhcyBDb250cmFjdFJvbGVzIH0gZnJvbSAnLi9jb250cmFjdC1yb2xlcy0yOTVjMjQzNC5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbnRyYWN0UHJpbWFyeVNhbGUgfSBmcm9tICcuL2NvbnRyYWN0LXNhbGVzLTRkZjdhNjM4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEQgYXMgRHJvcENsYWltQ29uZGl0aW9ucyB9IGZyb20gJy4vZHJvcC1jbGFpbS1jb25kaXRpb25zLTYwMTA3NDVhLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IFMgYXMgU3RhbmRhcmRFcmM3MjEgfSBmcm9tICcuL2VyYy03MjEtc3RhbmRhcmQtZTZkYzEwYmQuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgUCBhcyBQYXBlckNoZWNrb3V0IH0gZnJvbSAnLi90aGlyZHdlYi1jaGVja291dC0wMGZkMjFjNi5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJy4vc2V0RXJjMjBBbGxvd2FuY2UtMzc5NWEzZDYuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICd6b2QnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NoYWlucyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvc3RvcmFnZSc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY3J5cHRvJztcbmltcG9ydCAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0ICdibi5qcyc7XG5pbXBvcnQgJ2JzNTgnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUJ1cm5hYmxlRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDMjBfVjIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZV9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyMFBlcm1pdC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNaW50YWJsZUVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU11bHRpY2FsbC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjBNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDbGFpbWFibGVFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRGVsYXllZFJldmVhbC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDNzIxX1YzLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFFbnVtZXJhYmxlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMUFRdWVyeWFibGVVcGdyYWRlYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFTdXBwbHkuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTGF6eU1pbnQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTWludGFibGVFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDNzIxX1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvTGF6eU1pbnRXaXRoVGllcl9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL1NoYXJlZE1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvem9yYV9JRVJDNzIxRHJvcC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lMb3lhbHR5Q2FyZC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lORlRNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQ2xhaW1hYmxlRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wRVJDMTE1NV9WMi5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2UxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZTExNTVfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1TWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NVN1cHBseS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1RW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNaW50YWJsZUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjc3MUNvbnRleHQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQXBwVVJJLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNvbnRyYWN0TWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRGlyZWN0TGlzdGluZ3MuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRW5nbGlzaEF1Y3Rpb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU9mZmVycy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQYWNrVlJGRGlyZWN0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zRW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQbGF0Zm9ybUZlZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQcmltYXJ5U2FsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lSb3lhbHR5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvT3duYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBaXJkcm9wRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWlyZHJvcEVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBaXJkcm9wRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50RmFjdG9yeUNvcmUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudFBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFjY291bnRQZXJtaXNzaW9uc19WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50Lmpzb24nO1xuaW1wb3J0ICdldGhlcnMvbGliL3V0aWxzJztcbmltcG9ydCAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgJy4vc2lnbmF0dXJlLTAxNjNlMDhkLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnLi9ub3JtYWxpemVQcmljZVZhbHVlLWI4MTE2ZWM3LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9tZXJrbGV0cmVlJztcbmltcG9ydCAnLi9hc3NlcnRFbmFibGVkLTUyODU4MWI2LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAndXVpZCc7XG5pbXBvcnQgJ2Zhc3QtZGVlcC1lcXVhbCc7XG5pbXBvcnQgJy4vZXJjLTcyMS03M2RmOGE4MC5icm93c2VyLmVzbS5qcyc7XG5cbi8qKlxuICogU2V0dXAgYSBjb2xsZWN0aW9uIG9mIG9uZS1vZi1vbmUgTkZUcyB0aGF0IGFyZSBtaW50ZWQgYXMgdXNlcnMgY2xhaW0gdGhlbS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IFRoaXJkd2ViU0RLIH0gZnJvbSBcIkB0aGlyZHdlYi1kZXYvc2RrXCI7XG4gKlxuICogY29uc3Qgc2RrID0gbmV3IFRoaXJkd2ViU0RLKFwie3tjaGFpbk5hbWV9fVwiKTtcbiAqIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgc2RrLmdldENvbnRyYWN0KFwie3tjb250cmFjdF9hZGRyZXNzfX1cIiwgXCJuZnQtZHJvcFwiKTtcbiAqIGBgYFxuICpcbiAqIEBpbnRlcm5hbFxuICogQGRlcHJlY2F0ZWQgdXNlIGNvbnRyYWN0LmVyYzcyMSBpbnN0ZWFkXG4gKi9cbmNsYXNzIE5GVERyb3AgZXh0ZW5kcyBTdGFuZGFyZEVyYzcyMSB7XG4gIHN0YXRpYyBjb250cmFjdFJvbGVzID0gTkZUX0JBU0VfQ09OVFJBQ1RfUk9MRVM7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuICAvKipcbiAgICogQ29uZmlndXJlIHJveWFsdGllc1xuICAgKiBAcmVtYXJrcyBTZXQgeW91ciBvd24gcm95YWx0aWVzIGZvciB0aGUgZW50aXJlIGNvbnRyYWN0IG9yIHBlciB0b2tlblxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIHJveWFsdGllcyBvbiB0aGUgd2hvbGUgY29udHJhY3RcbiAgICogY29udHJhY3Qucm95YWx0aWVzLnNldERlZmF1bHRSb3lhbHR5SW5mbyh7XG4gICAqICAgc2VsbGVyX2ZlZV9iYXNpc19wb2ludHM6IDEwMCwgLy8gMSVcbiAgICogICBmZWVfcmVjaXBpZW50OiBcIjB4Li4uXCJcbiAgICogfSk7XG4gICAqIC8vIG92ZXJyaWRlIHJveWFsdHkgZm9yIGEgcGFydGljdWxhciB0b2tlblxuICAgKiBjb250cmFjdC5yb3lhbHRpZXMuc2V0VG9rZW5Sb3lhbHR5SW5mbyh0b2tlbklkLCB7XG4gICAqICAgc2VsbGVyX2ZlZV9iYXNpc19wb2ludHM6IDUwMCwgLy8gNSVcbiAgICogICBmZWVfcmVjaXBpZW50OiBcIjB4Li4uXCJcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cblxuICAvKipcbiAgICogQ29uZmlndXJlIGNsYWltIGNvbmRpdGlvbnNcbiAgICogQHJlbWFya3MgRGVmaW5lIHdobyBjYW4gY2xhaW0gTkZUcyBpbiB0aGUgY29sbGVjdGlvbiwgd2hlbiBhbmQgaG93IG1hbnkuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcHJlc2FsZVN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gICAqIGNvbnN0IHB1YmxpY1NhbGVTdGFydFRpbWUgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgNjAgKiA2MCAqIDI0ICogMTAwMCk7XG4gICAqIGNvbnN0IGNsYWltQ29uZGl0aW9ucyA9IFtcbiAgICogICB7XG4gICAqICAgICBzdGFydFRpbWU6IHByZXNhbGVTdGFydFRpbWUsIC8vIHN0YXJ0IHRoZSBwcmVzYWxlIG5vd1xuICAgKiAgICAgbWF4Q2xhaW1hYmxlU3VwcGx5OiAyLCAvLyBsaW1pdCBob3cgbWFueSBtaW50cyBmb3IgdGhpcyBwcmVzYWxlXG4gICAqICAgICBwcmljZTogMC4wMSwgLy8gcHJlc2FsZSBwcmljZVxuICAgKiAgICAgc25hcHNob3Q6IFsnMHguLi4nLCAnMHguLi4nXSwgLy8gbGltaXQgbWludGluZyB0byBvbmx5IGNlcnRhaW4gYWRkcmVzc2VzXG4gICAqICAgfSxcbiAgICogICB7XG4gICAqICAgICBzdGFydFRpbWU6IHB1YmxpY1NhbGVTdGFydFRpbWUsIC8vIDI0aCBhZnRlciBwcmVzYWxlLCBzdGFydCBwdWJsaWMgc2FsZVxuICAgKiAgICAgcHJpY2U6IDAuMDgsIC8vIHB1YmxpYyBzYWxlIHByaWNlXG4gICAqICAgfVxuICAgKiBdKTtcbiAgICogYXdhaXQgY29udHJhY3QuY2xhaW1Db25kaXRpb25zLnNldChjbGFpbUNvbmRpdGlvbnMpO1xuICAgKiBgYGBcbiAgICovXG5cbiAgLyoqXG4gICAqIERlbGF5ZWQgcmV2ZWFsXG4gICAqIEByZW1hcmtzIENyZWF0ZSBhIGJhdGNoIG9mIGVuY3J5cHRlZCBORlRzIHRoYXQgY2FuIGJlIHJldmVhbGVkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyB0aGUgcmVhbCBORlRzLCB0aGVzZSB3aWxsIGJlIGVuY3J5cHRlZCB1bnRpbCB5b3UgcmV2ZWFsIHRoZW1cbiAgICogY29uc3QgcmVhbE5GVHMgPSBbe1xuICAgKiAgIG5hbWU6IFwiQ29tbW9uIE5GVCAjMVwiLFxuICAgKiAgIGRlc2NyaXB0aW9uOiBcIkNvbW1vbiBORlQsIG9uZSBvZiBtYW55LlwiLFxuICAgKiAgIGltYWdlOiBmcy5yZWFkRmlsZVN5bmMoXCJwYXRoL3RvL2ltYWdlLnBuZ1wiKSxcbiAgICogfSwge1xuICAgKiAgIG5hbWU6IFwiU3VwZXIgUmFyZSBORlQgIzJcIixcbiAgICogICBkZXNjcmlwdGlvbjogXCJZb3UgZ290IGEgU3VwZXIgUmFyZSBORlQhXCIsXG4gICAqICAgaW1hZ2U6IGZzLnJlYWRGaWxlU3luYyhcInBhdGgvdG8vaW1hZ2UucG5nXCIpLFxuICAgKiB9XTtcbiAgICogLy8gQSBwbGFjZWhvbGRlciBORlQgdGhhdCBwZW9wbGUgd2lsbCBnZXQgaW1tZWRpYXRlbHkgaW4gdGhlaXIgd2FsbGV0LCBhbmQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdGhlIHJlYWwgTkZUIGF0IHJldmVhbCB0aW1lXG4gICAqIGNvbnN0IHBsYWNlaG9sZGVyTkZUID0ge1xuICAgKiAgIG5hbWU6IFwiSGlkZGVuIE5GVFwiLFxuICAgKiAgIGRlc2NyaXB0aW9uOiBcIldpbGwgYmUgcmV2ZWFsZWQgbmV4dCB3ZWVrIVwiXG4gICAqIH07XG4gICAqIC8vIENyZWF0ZSBhbmQgZW5jcnlwdCB0aGUgTkZUc1xuICAgKiBhd2FpdCBjb250cmFjdC5yZXZlYWxlci5jcmVhdGVEZWxheWVkUmV2ZWFsQmF0Y2goXG4gICAqICAgcGxhY2Vob2xkZXJORlQsXG4gICAqICAgcmVhbE5GVHMsXG4gICAqICAgXCJteSBzZWNyZXQgcGFzc3dvcmRcIixcbiAgICogKTtcbiAgICogLy8gV2hlbmV2ZXIgeW91J3JlIHJlYWR5LCByZXZlYWwgeW91ciBORlRzIGF0IGFueSB0aW1lXG4gICAqIGNvbnN0IGJhdGNoSWQgPSAwOyAvLyB0aGUgYmF0Y2ggdG8gcmV2ZWFsXG4gICAqIGF3YWl0IGNvbnRyYWN0LnJldmVhbGVyLnJldmVhbChiYXRjaElkLCBcIm15IHNlY3JldCBwYXNzd29yZFwiKTtcbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDaGVja291dFxuICAgKiBAcmVtYXJrcyBDcmVhdGUgYSBGSUFUIGN1cnJlbmN5IGNoZWNrb3V0IGZvciB5b3VyIE5GVCBkcm9wLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvcihuZXR3b3JrLCBhZGRyZXNzLCBzdG9yYWdlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGxldCBhYmkgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY2hhaW5JZCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgIGxldCBjb250cmFjdFdyYXBwZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IG5ldyBDb250cmFjdFdyYXBwZXIobmV0d29yaywgYWRkcmVzcywgYWJpLCBvcHRpb25zLCBzdG9yYWdlKTtcbiAgICBzdXBlcihjb250cmFjdFdyYXBwZXIsIHN0b3JhZ2UsIGNoYWluSWQpO1xuICAgIHRoaXMuYWJpID0gQWJpU2NoZW1hLnBhcnNlKGFiaSB8fCBbXSk7XG4gICAgdGhpcy5tZXRhZGF0YSA9IG5ldyBDb250cmFjdE1ldGFkYXRhKHRoaXMuY29udHJhY3RXcmFwcGVyLCBEcm9wRXJjNzIxQ29udHJhY3RTY2hlbWEsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5hcHAgPSBuZXcgQ29udHJhY3RBcHBVUkkodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMubWV0YWRhdGEsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5yb2xlcyA9IG5ldyBDb250cmFjdFJvbGVzKHRoaXMuY29udHJhY3RXcmFwcGVyLCBORlREcm9wLmNvbnRyYWN0Um9sZXMpO1xuICAgIHRoaXMucm95YWx0aWVzID0gbmV3IENvbnRyYWN0Um95YWx0eSh0aGlzLmNvbnRyYWN0V3JhcHBlciwgdGhpcy5tZXRhZGF0YSk7XG4gICAgdGhpcy5zYWxlcyA9IG5ldyBDb250cmFjdFByaW1hcnlTYWxlKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmNsYWltQ29uZGl0aW9ucyA9IG5ldyBEcm9wQ2xhaW1Db25kaXRpb25zKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLm1ldGFkYXRhLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBDb250cmFjdEVuY29kZXIodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXN0aW1hdG9yID0gbmV3IEdhc0Nvc3RFc3RpbWF0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IENvbnRyYWN0RXZlbnRzKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLnBsYXRmb3JtRmVlcyA9IG5ldyBDb250cmFjdFBsYXRmb3JtRmVlKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLnJldmVhbGVyID0gbmV3IERlbGF5ZWRSZXZlYWwodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMuc3RvcmFnZSwgRkVBVFVSRV9ORlRfUkVWRUFMQUJMRS5uYW1lLCAoKSA9PiB0aGlzLmVyYzcyMS5uZXh0VG9rZW5JZFRvTWludCgpKTtcbiAgICB0aGlzLmludGVyY2VwdG9yID0gbmV3IENvbnRyYWN0SW50ZXJjZXB0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMub3duZXIgPSBuZXcgQ29udHJhY3RPd25lcih0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5jaGVja291dCA9IG5ldyBQYXBlckNoZWNrb3V0KHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9uTmV0d29ya1VwZGF0ZWQobmV0d29yaykge1xuICAgIHRoaXMuY29udHJhY3RXcmFwcGVyLnVwZGF0ZVNpZ25lck9yUHJvdmlkZXIobmV0d29yayk7XG4gIH1cbiAgZ2V0QWRkcmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cmFjdFdyYXBwZXIuYWRkcmVzcztcbiAgfVxuXG4gIC8qKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogUkVBRCBGVU5DVElPTlNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdG90YWwgY291bnQgTkZUcyBpbiB0aGlzIGRyb3AgY29udHJhY3QsIGJvdGggY2xhaW1lZCBhbmQgdW5jbGFpbWVkXG4gICAqL1xuICBhc3luYyB0b3RhbFN1cHBseSgpIHtcbiAgICBjb25zdCBbY2xhaW1lZCwgdW5jbGFpbWVkXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnRvdGFsQ2xhaW1lZFN1cHBseSgpLCB0aGlzLnRvdGFsVW5jbGFpbWVkU3VwcGx5KCldKTtcbiAgICByZXR1cm4gY2xhaW1lZC5hZGQodW5jbGFpbWVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQWxsIENsYWltZWQgTkZUc1xuICAgKlxuICAgKiBAcmVtYXJrcyBGZXRjaCBhbGwgdGhlIE5GVHMgKGFuZCB0aGVpciBvd25lcnMpIHRoYXQgaGF2ZSBiZWVuIGNsYWltZWQgaW4gdGhpcyBEcm9wLlxuICAgKlxuICAgKiAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgY2xhaW1lZE5GVHMgPSBhd2FpdCBjb250cmFjdC5nZXRBbGxDbGFpbWVkKCk7XG4gICAqIGNvbnN0IGZpcnN0T3duZXIgPSBjbGFpbWVkTkZUc1swXS5vd25lcjtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBxdWVyeVBhcmFtcyAtIG9wdGlvbmFsIGZpbHRlcmluZyB0byBvbmx5IGZldGNoIGEgc3Vic2V0IG9mIHJlc3VsdHMuXG4gICAqIEByZXR1cm5zIFRoZSBORlQgbWV0YWRhdGEgYW5kIHRoZWlyIG93bmVyc2ZvciBhbGwgTkZUcyBxdWVyaWVkLlxuICAgKi9cbiAgYXN5bmMgZ2V0QWxsQ2xhaW1lZChxdWVyeVBhcmFtcykge1xuICAgIGNvbnN0IHN0YXJ0ID0gQmlnTnVtYmVyLmZyb20ocXVlcnlQYXJhbXM/LnN0YXJ0IHx8IDApLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgY291bnQgPSBCaWdOdW1iZXIuZnJvbShxdWVyeVBhcmFtcz8uY291bnQgfHwgREVGQVVMVF9RVUVSWV9BTExfQ09VTlQpLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgbWF4SWQgPSBNYXRoLm1pbigoYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZChcIm5leHRUb2tlbklkVG9DbGFpbVwiLCBbXSkpLnRvTnVtYmVyKCksIHN0YXJ0ICsgY291bnQpO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChBcnJheS5mcm9tKEFycmF5KG1heElkKS5rZXlzKCkpLm1hcChpID0+IHRoaXMuZ2V0KGkudG9TdHJpbmcoKSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQWxsIFVuY2xhaW1lZCBORlRzXG4gICAqXG4gICAqIEByZW1hcmtzIEZldGNoIGFsbCB0aGUgTkZUcyB0aGF0IGhhdmUgYmVlbiBub3QgYmVlbiBjbGFpbWVkIHlldCBpbiB0aGlzIERyb3AuXG4gICAqXG4gICAqICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCB1bmNsYWltZWRORlRzID0gYXdhaXQgY29udHJhY3QuZ2V0QWxsVW5jbGFpbWVkKCk7XG4gICAqIGNvbnN0IGZpcnN0VW5jbGFpbWVkTkZUID0gdW5jbGFpbWVkTkZUc1swXS5uYW1lO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHF1ZXJ5UGFyYW1zIC0gb3B0aW9uYWwgZmlsdGVyaW5nIHRvIG9ubHkgZmV0Y2ggYSBzdWJzZXQgb2YgcmVzdWx0cy5cbiAgICogQHJldHVybnMgVGhlIE5GVCBtZXRhZGF0YSBmb3IgYWxsIE5GVHMgcXVlcmllZC5cbiAgICovXG4gIGFzeW5jIGdldEFsbFVuY2xhaW1lZChxdWVyeVBhcmFtcykge1xuICAgIGNvbnN0IHN0YXJ0ID0gQmlnTnVtYmVyLmZyb20ocXVlcnlQYXJhbXM/LnN0YXJ0IHx8IDApLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgY291bnQgPSBCaWdOdW1iZXIuZnJvbShxdWVyeVBhcmFtcz8uY291bnQgfHwgREVGQVVMVF9RVUVSWV9BTExfQ09VTlQpLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgZmlyc3RUb2tlbklkID0gQmlnTnVtYmVyLmZyb20oTWF0aC5tYXgoKGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJuZXh0VG9rZW5JZFRvQ2xhaW1cIiwgW10pKS50b051bWJlcigpLCBzdGFydCkpO1xuICAgIGNvbnN0IG1heElkID0gQmlnTnVtYmVyLmZyb20oTWF0aC5taW4oKGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJuZXh0VG9rZW5JZFRvTWludFwiLCBbXSkpLnRvTnVtYmVyKCksIGZpcnN0VG9rZW5JZC50b051bWJlcigpICsgY291bnQpKTtcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoQXJyYXkuZnJvbShBcnJheShtYXhJZC5zdWIoZmlyc3RUb2tlbklkKS50b051bWJlcigpKS5rZXlzKCkpLm1hcChpID0+IHRoaXMuZXJjNzIxLmdldFRva2VuTWV0YWRhdGEoZmlyc3RUb2tlbklkLmFkZChpKS50b1N0cmluZygpKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2xhaW1lZCBzdXBwbHlcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IHRoZSBudW1iZXIgb2YgY2xhaW1lZCBORlRzIGluIHRoaXMgRHJvcC5cbiAgICpcbiAgICogKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGNsYWltZWRORlRDb3VudCA9IGF3YWl0IGNvbnRyYWN0LnRvdGFsQ2xhaW1lZFN1cHBseSgpO1xuICAgKiBjb25zb2xlLmxvZyhgTkZUcyBjbGFpbWVkIHNvIGZhcjogJHtjbGFpbWVkTkZUQ291bnR9YCk7XG4gICAqIGBgYFxuICAgKiBAcmV0dXJucyBUaGUgdW5jbGFpbWVkIHN1cHBseVxuICAgKi9cbiAgYXN5bmMgdG90YWxDbGFpbWVkU3VwcGx5KCkge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS50b3RhbENsYWltZWRTdXBwbHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHVuY2xhaW1lZCBzdXBwbHlcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IHRoZSBudW1iZXIgb2YgdW5jbGFpbWVkIE5GVHMgaW4gdGhpcyBEcm9wLlxuICAgKlxuICAgKiAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgdW5jbGFpbWVkTkZUQ291bnQgPSBhd2FpdCBjb250cmFjdC50b3RhbFVuY2xhaW1lZFN1cHBseSgpO1xuICAgKiBjb25zb2xlLmxvZyhgTkZUcyBsZWZ0IHRvIGNsYWltOiAke3VuY2xhaW1lZE5GVENvdW50fWApO1xuICAgKiBgYGBcbiAgICogQHJldHVybnMgVGhlIHVuY2xhaW1lZCBzdXBwbHlcbiAgICovXG4gIGFzeW5jIHRvdGFsVW5jbGFpbWVkU3VwcGx5KCkge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS50b3RhbFVuY2xhaW1lZFN1cHBseSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHVzZXJzIGNhbiB0cmFuc2ZlciBORlRzIGZyb20gdGhpcyBjb250cmFjdFxuICAgKi9cbiAgYXN5bmMgaXNUcmFuc2ZlclJlc3RyaWN0ZWQoKSB7XG4gICAgY29uc3QgYW55b25lQ2FuVHJhbnNmZXIgPSBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkKFwiaGFzUm9sZVwiLCBbZ2V0Um9sZUhhc2goXCJ0cmFuc2ZlclwiKSwgY29uc3RhbnRzLkFkZHJlc3NaZXJvXSk7XG4gICAgcmV0dXJuICFhbnlvbmVDYW5UcmFuc2ZlcjtcbiAgfVxuXG4gIC8qKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogV1JJVEUgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBiYXRjaCBvZiB1bmlxdWUgTkZUcyB0byBiZSBjbGFpbWVkIGluIHRoZSBmdXR1cmVcbiAgICpcbiAgICogQHJlbWFya3MgQ3JlYXRlIGJhdGNoIGFsbG93cyB5b3UgdG8gY3JlYXRlIGEgYmF0Y2ggb2YgbWFueSB1bmlxdWUgTkZUcyBpbiBvbmUgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gQ3VzdG9tIG1ldGFkYXRhIG9mIHRoZSBORlRzIHRvIGNyZWF0ZVxuICAgKiBjb25zdCBtZXRhZGF0YXMgPSBbe1xuICAgKiAgIG5hbWU6IFwiQ29vbCBORlRcIixcbiAgICogICBkZXNjcmlwdGlvbjogXCJUaGlzIGlzIGEgY29vbCBORlRcIixcbiAgICogICBpbWFnZTogZnMucmVhZEZpbGVTeW5jKFwicGF0aC90by9pbWFnZS5wbmdcIiksIC8vIFRoaXMgY2FuIGJlIGFuIGltYWdlIHVybCBvciBmaWxlXG4gICAqIH0sIHtcbiAgICogICBuYW1lOiBcIkNvb2wgTkZUXCIsXG4gICAqICAgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBhIGNvb2wgTkZUXCIsXG4gICAqICAgaW1hZ2U6IGZzLnJlYWRGaWxlU3luYyhcInBhdGgvdG8vaW1hZ2UucG5nXCIpLFxuICAgKiB9XTtcbiAgICpcbiAgICogY29uc3QgcmVzdWx0cyA9IGF3YWl0IGNvbnRyYWN0LmNyZWF0ZUJhdGNoKG1ldGFkYXRhcyk7IC8vIHVwbG9hZHMgYW5kIGNyZWF0ZXMgdGhlIE5GVHMgb24gY2hhaW5cbiAgICogY29uc3QgZmlyc3RUb2tlbklkID0gcmVzdWx0c1swXS5pZDsgLy8gdG9rZW4gaWQgb2YgdGhlIGZpcnN0IGNyZWF0ZWQgTkZUXG4gICAqIGNvbnN0IGZpcnN0TkZUID0gYXdhaXQgcmVzdWx0c1swXS5kYXRhKCk7IC8vIChvcHRpb25hbCkgZmV0Y2ggZGV0YWlscyBvZiB0aGUgZmlyc3QgY3JlYXRlZCBORlRcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBtZXRhZGF0YXMgLSBUaGUgbWV0YWRhdGEgdG8gaW5jbHVkZSBpbiB0aGUgYmF0Y2guXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9uYWwgdXBsb2FkIHByb2dyZXNzIGNhbGxiYWNrXG4gICAqL1xuICBjcmVhdGVCYXRjaCA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAobWV0YWRhdGFzLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmxhenlNaW50LnByZXBhcmUobWV0YWRhdGFzLCBvcHRpb25zKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIGNsYWltIHRyYW5zYWN0aW9uIHdpdGhvdXQgZXhlY3V0aW5nIGl0LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3IgZXN0aW1hdGluZyB0aGUgZ2FzIGNvc3Qgb2YgYSBjbGFpbSB0cmFuc2FjdGlvbiwgb3ZlcnJpZGluZyB0cmFuc2FjdGlvbiBvcHRpb25zIGFuZCBoYXZpbmcgZmluZSBncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgdHJhbnNhY3Rpb24gZXhlY3V0aW9uLlxuICAgKiBAcGFyYW0gZGVzdGluYXRpb25BZGRyZXNzIC0gQWRkcmVzcyB5b3Ugd2FudCB0byBzZW5kIHRoZSB0b2tlbiB0b1xuICAgKiBAcGFyYW0gcXVhbnRpdHkgLSBRdWFudGl0eSBvZiB0aGUgdG9rZW5zIHlvdSB3YW50IHRvIGNsYWltXG4gICAqIEBwYXJhbSBjaGVja0VSQzIwQWxsb3dhbmNlIC0gT3B0aW9uYWwsIGNoZWNrIGlmIHRoZSB3YWxsZXQgaGFzIGVub3VnaCBFUkMyMCBhbGxvd2FuY2UgdG8gY2xhaW0gdGhlIHRva2VucywgYW5kIGlmIG5vdCwgYXBwcm92ZSB0aGUgdHJhbnNmZXJcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBjb250cmFjdC5lcmM3MjEuY2xhaW0ucHJlcGFyZSguLi5hcmdzKWAgaW5zdGVhZFxuICAgKi9cbiAgYXN5bmMgZ2V0Q2xhaW1UcmFuc2FjdGlvbihkZXN0aW5hdGlvbkFkZHJlc3MsIHF1YW50aXR5KSB7XG4gICAgbGV0IGNoZWNrRVJDMjBBbGxvd2FuY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmdldENsYWltVHJhbnNhY3Rpb24oZGVzdGluYXRpb25BZGRyZXNzLCBxdWFudGl0eSwge1xuICAgICAgY2hlY2tFUkMyMEFsbG93YW5jZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENsYWltIHVuaXF1ZSBORlRzIHRvIGEgc3BlY2lmaWMgV2FsbGV0XG4gICAqXG4gICAqIEByZW1hcmtzIExldCB0aGUgc3BlY2lmaWVkIHdhbGxldCBjbGFpbSBORlRzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiOyAvLyBhZGRyZXNzIG9mIHRoZSB3YWxsZXQgeW91IHdhbnQgdG8gY2xhaW0gdGhlIE5GVHNcbiAgICogY29uc3QgcXVhbnRpdHkgPSAxOyAvLyBob3cgbWFueSB1bmlxdWUgTkZUcyB5b3Ugd2FudCB0byBjbGFpbVxuICAgKlxuICAgKiBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LmNsYWltVG8oYWRkcmVzcywgcXVhbnRpdHkpO1xuICAgKiBjb25zdCByZWNlaXB0ID0gdHhbMF0ucmVjZWlwdDsgLy8gdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHRcbiAgICogY29uc3QgY2xhaW1lZFRva2VuSWQgPSB0eFswXS5pZDsgLy8gdGhlIGlkIG9mIHRoZSBORlQgY2xhaW1lZFxuICAgKiBjb25zdCBjbGFpbWVkTkZUID0gYXdhaXQgdHhbMF0uZGF0YSgpOyAvLyAob3B0aW9uYWwpIGdldCB0aGUgY2xhaW1lZCBORlQgbWV0YWRhdGFcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBkZXN0aW5hdGlvbkFkZHJlc3MgLSBBZGRyZXNzIHlvdSB3YW50IHRvIHNlbmQgdGhlIHRva2VuIHRvXG4gICAqIEBwYXJhbSBxdWFudGl0eSAtIFF1YW50aXR5IG9mIHRoZSB0b2tlbnMgeW91IHdhbnQgdG8gY2xhaW1cbiAgICogQHBhcmFtIGNoZWNrRVJDMjBBbGxvd2FuY2UgLSBPcHRpb25hbCwgY2hlY2sgaWYgdGhlIHdhbGxldCBoYXMgZW5vdWdoIEVSQzIwIGFsbG93YW5jZSB0byBjbGFpbSB0aGUgdG9rZW5zLCBhbmQgaWYgbm90LCBhcHByb3ZlIHRoZSB0cmFuc2ZlclxuICAgKlxuICAgKiBAcmV0dXJucyAgYW4gYXJyYXkgb2YgcmVzdWx0cyBjb250YWluaW5nIHRoZSBpZCBvZiB0aGUgdG9rZW4gY2xhaW1lZCwgdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHQgYW5kIGEgcHJvbWlzZSB0byBvcHRpb25hbGx5IGZldGNoIHRoZSBuZnQgbWV0YWRhdGFcbiAgICovXG4gIGNsYWltVG8gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oKCgpID0+IHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAoZGVzdGluYXRpb25BZGRyZXNzLCBxdWFudGl0eSkge1xuICAgICAgbGV0IGNoZWNrRVJDMjBBbGxvd2FuY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgICByZXR1cm4gX3RoaXMuZXJjNzIxLmNsYWltVG8ucHJlcGFyZShkZXN0aW5hdGlvbkFkZHJlc3MsIHF1YW50aXR5LCB7XG4gICAgICAgIGNoZWNrRVJDMjBBbGxvd2FuY2VcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pKCkpO1xuXG4gIC8qKlxuICAgKiBDbGFpbSBORlRzIHRvIHRoZSBjb25uZWN0ZWQgd2FsbGV0LlxuICAgKlxuICAgKiBAcmVtYXJrcyBTZWUge0BsaW5rIE5GVERyb3AuY2xhaW1Ub31cbiAgICpcbiAgICogQHJldHVybnMgIGFuIGFycmF5IG9mIHJlc3VsdHMgY29udGFpbmluZyB0aGUgaWQgb2YgdGhlIHRva2VuIGNsYWltZWQsIHRoZSB0cmFuc2FjdGlvbiByZWNlaXB0IGFuZCBhIHByb21pc2UgdG8gb3B0aW9uYWxseSBmZXRjaCB0aGUgbmZ0IG1ldGFkYXRhXG4gICAqL1xuICBjbGFpbSA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbigoKCkgPT4ge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAocXVhbnRpdHkpIHtcbiAgICAgIGxldCBjaGVja0VSQzIwQWxsb3dhbmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgcmV0dXJuIF90aGlzMi5jbGFpbVRvLnByZXBhcmUoYXdhaXQgX3RoaXMyLmNvbnRyYWN0V3JhcHBlci5nZXRTaWduZXJBZGRyZXNzKCksIHF1YW50aXR5LCBjaGVja0VSQzIwQWxsb3dhbmNlKTtcbiAgICB9O1xuICB9KSgpKTtcblxuICAvKipcbiAgICogQnVybiBhIHNpbmdsZSBORlRcbiAgICpcbiAgICogQHBhcmFtIHRva2VuSWQgLSB0aGUgdG9rZW4gSWQgdG8gYnVyblxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyYWN0LmJ1cm5Ub2tlbih0b2tlbklkKTtcbiAgICogYGBgXG4gICAqXG4gICAqL1xuICBidXJuID0gLyogQF9fUFVSRV9fICovYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jIHRva2VuSWQgPT4ge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5idXJuLnByZXBhcmUodG9rZW5JZCk7XG4gIH0pO1xuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogU1RBTkRBUkQgRVJDNzIxIEZVTkNUSU9OU1xuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGUgTkZUXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgdG9rZW5JZCA9IDA7XG4gICAqIGNvbnN0IG5mdCA9IGF3YWl0IGNvbnRyYWN0LmdldCh0b2tlbklkKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB0b2tlbklkIC0gdGhlIHRva2VuSWQgb2YgdGhlIE5GVCB0byByZXRyaWV2ZVxuICAgKiBAcmV0dXJucyBUaGUgTkZUIG1ldGFkYXRhXG4gICAqL1xuICBhc3luYyBnZXQodG9rZW5JZCkge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5nZXQodG9rZW5JZCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IG93bmVyIG9mIGEgZ2l2ZW4gTkZUIHdpdGhpbiB0aGlzIENvbnRyYWN0XG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbklkIC0gdGhlIHRva2VuSWQgb2YgdGhlIE5GVFxuICAgKiBAcmV0dXJucyBUaGUgYWRkcmVzcyBvZiB0aGUgb3duZXJcbiAgICovXG4gIGFzeW5jIG93bmVyT2YodG9rZW5JZCkge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5vd25lck9mKHRva2VuSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBORlQgQmFsYW5jZVxuICAgKlxuICAgKiBAcmVtYXJrcyBHZXQgYSB3YWxsZXRzIE5GVCBiYWxhbmNlIChudW1iZXIgb2YgTkZUcyBpbiB0aGlzIGNvbnRyYWN0IG93bmVkIGJ5IHRoZSB3YWxsZXQpLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHdhbGxldEFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiO1xuICAgKiBjb25zdCBiYWxhbmNlID0gYXdhaXQgY29udHJhY3QuYmFsYW5jZU9mKHdhbGxldEFkZHJlc3MpO1xuICAgKiBjb25zb2xlLmxvZyhiYWxhbmNlKTtcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyBiYWxhbmNlT2YoYWRkcmVzcykge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS5iYWxhbmNlT2YoYWRkcmVzcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IE5GVCBCYWxhbmNlIGZvciB0aGUgY3VycmVudGx5IGNvbm5lY3RlZCB3YWxsZXRcbiAgICovXG4gIGFzeW5jIGJhbGFuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmJhbGFuY2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGlzIHdhbGxldCBoYXMgYXBwcm92ZWQgdHJhbnNmZXJzIGZyb20gdGhlIGdpdmVuIG9wZXJhdG9yXG4gICAqIEBwYXJhbSBhZGRyZXNzIC0gdGhlIHdhbGxldCBhZGRyZXNzXG4gICAqIEBwYXJhbSBvcGVyYXRvciAtIHRoZSBvcGVyYXRvciBhZGRyZXNzXG4gICAqL1xuICBhc3luYyBpc0FwcHJvdmVkKGFkZHJlc3MsIG9wZXJhdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmlzQXBwcm92ZWQoYWRkcmVzcywgb3BlcmF0b3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVyIGFuIE5GVFxuICAgKlxuICAgKiBAcmVtYXJrcyBUcmFuc2ZlciBhbiBORlQgZnJvbSB0aGUgY29ubmVjdGVkIHdhbGxldCB0byBhbm90aGVyIHdhbGxldC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCB3YWxsZXRBZGRyZXNzID0gXCJ7e3dhbGxldF9hZGRyZXNzfX1cIjtcbiAgICogY29uc3QgdG9rZW5JZCA9IDA7XG4gICAqIGF3YWl0IGNvbnRyYWN0LnRyYW5zZmVyKHdhbGxldEFkZHJlc3MsIHRva2VuSWQpO1xuICAgKiBgYGBcbiAgICovXG4gIHRyYW5zZmVyID0gLyogQF9fUFVSRV9fICovYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jICh0bywgdG9rZW5JZCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmVyYzcyMS50cmFuc2Zlci5wcmVwYXJlKHRvLCB0b2tlbklkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcHJvdmUgb3IgcmVtb3ZlIG9wZXJhdG9yIGFzIGFuIG9wZXJhdG9yIGZvciB0aGUgY2FsbGVyLiBPcGVyYXRvcnMgY2FuIGNhbGwgdHJhbnNmZXJGcm9tIG9yIHNhZmVUcmFuc2ZlckZyb20gZm9yIGFueSB0b2tlbiBvd25lZCBieSB0aGUgY2FsbGVyLlxuICAgKiBAcGFyYW0gb3BlcmF0b3IgLSB0aGUgb3BlcmF0b3IncyBhZGRyZXNzXG4gICAqIEBwYXJhbSBhcHByb3ZlZCAtIHdoZXRoZXIgdG8gYXBwcm92ZSBvciByZW1vdmVcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRBcHByb3ZhbEZvckFsbCA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAob3BlcmF0b3IsIGFwcHJvdmVkKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLnNldEFwcHJvdmFsRm9yQWxsLnByZXBhcmUob3BlcmF0b3IsIGFwcHJvdmVkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcHJvdmUgYW4gb3BlcmF0b3IgZm9yIHRoZSBORlQgb3duZXIuIE9wZXJhdG9ycyBjYW4gY2FsbCB0cmFuc2ZlckZyb20gb3Igc2FmZVRyYW5zZmVyRnJvbSBmb3IgdGhlIHNwZWNpZmllZCB0b2tlbi5cbiAgICogQHBhcmFtIG9wZXJhdG9yIC0gdGhlIG9wZXJhdG9yJ3MgYWRkcmVzc1xuICAgKiBAcGFyYW0gdG9rZW5JZCAtIHRoZSB0b2tlbklkIHRvIGdpdmUgYXBwcm92YWwgZm9yXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc2V0QXBwcm92YWxGb3JUb2tlbiA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAob3BlcmF0b3IsIHRva2VuSWQpID0+IHtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICBjb250cmFjdFdyYXBwZXI6IHRoaXMuY29udHJhY3RXcmFwcGVyLFxuICAgICAgbWV0aG9kOiBcImFwcHJvdmVcIixcbiAgICAgIGFyZ3M6IFtvcGVyYXRvciwgdG9rZW5JZF1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZShtZXRob2QsIGFyZ3MsIG92ZXJyaWRlcykge1xuICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgIGNvbnRyYWN0V3JhcHBlcjogdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICBtZXRob2QsXG4gICAgICBhcmdzLFxuICAgICAgb3ZlcnJpZGVzXG4gICAgfSk7XG4gIH1cblxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFBSSVZBVEUgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBjYWxsKGZ1bmN0aW9uTmFtZSwgYXJncywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3RXcmFwcGVyLmNhbGwoZnVuY3Rpb25OYW1lLCBhcmdzLCBvdmVycmlkZXMpO1xuICB9XG59XG5cbmV4cG9ydCB7IE5GVERyb3AgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/nft-drop-77497290.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-00fd21c6.browser.esm.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-00fd21c6.browser.esm.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: function() { return /* binding */ PaperCheckout; }\n/* harmony export */ });\n/* harmony import */ var _index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-19379f73.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-19379f73.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n\n\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aS.Mainnet]: \"Ethereum\",\n  [_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aS.Goerli]: \"Goerli\",\n  [_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aS.Polygon]: \"Polygon\",\n  [_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aS.Mumbai]: \"Mumbai\",\n  [_index_19379f73_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.aS.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress - the contract address\n * @param chainId - the chain id\n * @internal\n * @returns The paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC90aGlyZHdlYi1jaGVja291dC0wMGZkMjFjNi5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0U7QUFDekI7O0FBRXZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGVBQWUsR0FBRyxrQkFBa0I7QUFDN0Q7QUFDQSxHQUFHLDhEQUFPO0FBQ1YsR0FBRyw4REFBTztBQUNWLEdBQUcsOERBQU87QUFDVixHQUFHLDhEQUFPO0FBQ1YsR0FBRyw4REFBTztBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwwREFBUyxtRUFBbUUsUUFBUTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYyxxQ0FBcUMsZ0JBQWdCLFNBQVMsV0FBVztBQUNwSDtBQUNBLEVBQUUsMERBQVM7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGNBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxFQUFFLDBEQUFTO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0aGlyZHdlYi1kZXYvc2RrL2Rpc3QvdGhpcmR3ZWItY2hlY2tvdXQtMDBmZDIxYzYuYnJvd3Nlci5lc20uanM/NjAxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhUyBhcyBDaGFpbklkIH0gZnJvbSAnLi9pbmRleC0xOTM3OWY3My5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuY29uc3QgUEFQRVJfQVBJX0JBU0UgPSBgaHR0cHM6Ly9wYXBlci54eXovYXBpYDtcbmNvbnN0IFBBUEVSX0FQSV9WRVJTSU9OID0gYDIwMjItMDgtMTJgO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBQQVBFUl9BUElfVVJMID0gYCR7UEFQRVJfQVBJX0JBU0V9LyR7UEFQRVJfQVBJX1ZFUlNJT059L3BsYXRmb3JtL3RoaXJkd2ViYDtcbmNvbnN0IFBBUEVSX0NIQUlOX0lEX01BUCA9IHtcbiAgW0NoYWluSWQuTWFpbm5ldF06IFwiRXRoZXJldW1cIixcbiAgW0NoYWluSWQuR29lcmxpXTogXCJHb2VybGlcIixcbiAgW0NoYWluSWQuUG9seWdvbl06IFwiUG9seWdvblwiLFxuICBbQ2hhaW5JZC5NdW1iYWldOiBcIk11bWJhaVwiLFxuICBbQ2hhaW5JZC5BdmFsYW5jaGVdOiBcIkF2YWxhbmNoZVwiXG59O1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBwYXJzZUNoYWluSWRUb1BhcGVyQ2hhaW4oY2hhaW5JZCkge1xuICBpbnZhcmlhbnQoY2hhaW5JZCBpbiBQQVBFUl9DSEFJTl9JRF9NQVAsIGBjaGFpbklkIG5vdCBzdXBwb3J0ZWQgYnkgcGFwZXI6ICR7Y2hhaW5JZH1gKTtcbiAgcmV0dXJuIFBBUEVSX0NIQUlOX0lEX01BUFtjaGFpbklkXTtcbn1cbi8qKlxuICpcbiAqIEBwYXJhbSBjb250cmFjdEFkZHJlc3MgLSB0aGUgY29udHJhY3QgYWRkcmVzc1xuICogQHBhcmFtIGNoYWluSWQgLSB0aGUgY2hhaW4gaWRcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybnMgVGhlIHBhcGVyIHh5eiBjb250cmFjdCBpZFxuICogQHRocm93cyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHJlZ2lzdGVyZWQgb24gcGFwZXIgeHl6XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUmVnaXN0ZXJlZENoZWNrb3V0SWQoY29udHJhY3RBZGRyZXNzLCBjaGFpbklkKSB7XG4gIGNvbnN0IHBhcGVyQ2hhaW4gPSBwYXJzZUNoYWluSWRUb1BhcGVyQ2hhaW4oY2hhaW5JZCk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke1BBUEVSX0FQSV9VUkx9L3JlZ2lzdGVyLWNvbnRyYWN0P2NvbnRyYWN0QWRkcmVzcz0ke2NvbnRyYWN0QWRkcmVzc30mY2hhaW49JHtwYXBlckNoYWlufWApO1xuICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgaW52YXJpYW50KGpzb24ucmVzdWx0LmlkLCBcIkNvbnRyYWN0IGlzIG5vdCByZWdpc3RlcmVkIHdpdGggcGFwZXJcIik7XG4gIHJldHVybiBqc29uLnJlc3VsdC5pZDtcbn1cblxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyBmb3IgY3JlYXRpbmcgYSBwYXBlci54eXogY2hlY2tvdXQgbGluay5cbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuY29uc3QgREVGQVVMVF9QQVJBTVMgPSB7XG4gIGV4cGlyZXNJbk1pbnV0ZXM6IDE1LFxuICBmZWVCZWFyZXI6IFwiQlVZRVJcIixcbiAgc2VuZEVtYWlsT25TdWNjZXNzOiB0cnVlLFxuICByZWRpcmVjdEFmdGVyUGF5bWVudDogZmFsc2Vcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNoZWNrb3V0TGlua0ludGVudChjb250cmFjdElkLCBwYXJhbXMpIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7UEFQRVJfQVBJX1VSTH0vY2hlY2tvdXQtbGluay1pbnRlbnRgLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29udHJhY3RJZCxcbiAgICAgIC4uLkRFRkFVTFRfUEFSQU1TLFxuICAgICAgLi4ucGFyYW1zLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgLi4ucGFyYW1zLm1ldGFkYXRhLFxuICAgICAgICB2aWFfcGxhdGZvcm06IFwidGhpcmR3ZWJcIlxuICAgICAgfSxcbiAgICAgIC8vIG92ZXJyaWRlcyB0aGF0IGFyZSBoYXJkIGNvZGVkXG4gICAgICBoaWRlTmF0aXZlTWludDogdHJ1ZSxcbiAgICAgIGhpZGVQYXBlcldhbGxldDogISFwYXJhbXMud2FsbGV0QWRkcmVzcyxcbiAgICAgIGhpZGVFeHRlcm5hbFdhbGxldDogdHJ1ZSxcbiAgICAgIGhpZGVQYXlXaXRoQ3J5cHRvOiB0cnVlLFxuICAgICAgdXNlUGFwZXJLZXk6IGZhbHNlXG4gICAgfSlcbiAgfSk7XG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICBpbnZhcmlhbnQoanNvbi5jaGVja291dExpbmtJbnRlbnRVcmwsIFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGVja291dCBsaW5rIGludGVudFwiKTtcbiAgcmV0dXJuIGpzb24uY2hlY2tvdXRMaW5rSW50ZW50VXJsO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBQYXBlckNoZWNrb3V0IHtcbiAgY29uc3RydWN0b3IoY29udHJhY3RXcmFwcGVyKSB7XG4gICAgdGhpcy5jb250cmFjdFdyYXBwZXIgPSBjb250cmFjdFdyYXBwZXI7XG4gIH1cbiAgYXN5bmMgZ2V0Q2hlY2tvdXRJZCgpIHtcbiAgICByZXR1cm4gZmV0Y2hSZWdpc3RlcmVkQ2hlY2tvdXRJZCh0aGlzLmNvbnRyYWN0V3JhcHBlci5hZGRyZXNzLCBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRDaGFpbklEKCkpO1xuICB9XG4gIGFzeW5jIGlzRW5hYmxlZCgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhKGF3YWl0IHRoaXMuZ2V0Q2hlY2tvdXRJZCgpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY3JlYXRlTGlua0ludGVudChwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgY3JlYXRlQ2hlY2tvdXRMaW5rSW50ZW50KGF3YWl0IHRoaXMuZ2V0Q2hlY2tvdXRJZCgpLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhcGVyQ2hlY2tvdXQgYXMgUCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-00fd21c6.browser.esm.js\n"));

/***/ })

}]);